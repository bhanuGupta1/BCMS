Book Collection Management System:

SQL Commands to Create Tables:

-- Create UserData Table
CREATE TABLE IF NOT EXISTS UserData (
    UserID INTEGER PRIMARY KEY,  -- Unique ID for each user
    UserName TEXT,               -- Name of the user
    Email TEXT UNIQUE NOT NULL,  -- Email address of the user (must be unique and not null)
    Password TEXT NOT NULL       -- Password of the user (cannot be null)
);

-- Create GenreData Table
CREATE TABLE IF NOT EXISTS GenreData (
    GenreID INTEGER PRIMARY KEY,         -- Unique ID for each genre
    GenreName TEXT NOT NULL,             -- Name of the genre (cannot be null)
    TotalBooksRead INTEGER,              -- Total number of books read in this genre
    CurrentlyReading INTEGER            -- Number of books currently being read in this genre
);

-- Create BookData Table
CREATE TABLE IF NOT EXISTS BookData (
    BookID INTEGER PRIMARY KEY,        -- Unique ID for each book
    Title TEXT NOT NULL,               -- Title of the book (cannot be null)
    Author TEXT,                       -- Author of the book
    DateOfIssue DATE,                  -- Date when the book was issued
    ISBN TEXT UNIQUE NOT NULL,         -- ISBN number of the book (must be unique and not null)
    Description TEXT,                  -- Description of the book
    CoverImage BLOB,                   -- Cover image of the book (binary data)
    Publisher TEXT,                    -- Publisher of the book
    BookCost FLOAT,                    -- Cost of the book
    IsLoanedOut BOOLEAN,               -- Loan status of the book (true or false)
    UserID INTEGER,                    -- ID of the user owning the book (foreign key)
    GenreID INTEGER,                   -- ID of the genre the book belongs to (foreign key)
    FOREIGN KEY (UserID) REFERENCES UserData(UserID),
    FOREIGN KEY (GenreID) REFERENCES GenreData(GenreID)
);

-- Create FriendsData Table
CREATE TABLE IF NOT EXISTS FriendsData (
    FriendID INTEGER PRIMARY KEY,    -- Unique ID for each friend
    FriendName TEXT,                 -- Name of the friend
    Email TEXT,                      -- Email address of the friend
    ContactNumber TEXT,              -- Contact number of the friend
    UserID INTEGER,                  -- ID of the user associated with this friend (foreign key)
    FOREIGN KEY (UserID) REFERENCES UserData(UserID)
);

-- Create LoanData Table
CREATE TABLE IF NOT EXISTS LoanData (
    LoanID INTEGER PRIMARY KEY,    -- Unique ID for each loan
    BookID INTEGER,                -- ID of the book being loaned (foreign key)
    FriendID INTEGER,              -- ID of the friend to whom the book is loaned (foreign key)
    LoanDate DATE,                 -- Date when the book was loaned
    DueDate DATE,                  -- Due date for the book to be returned
    ReturnDate DATE,               -- Date when the book was actually returned
    FOREIGN KEY (BookID) REFERENCES BookData(BookID),
    FOREIGN KEY (FriendID) REFERENCES FriendsData(FriendID)
);

-- Create ReadingProgressData Table
CREATE TABLE IF NOT EXISTS ReadingProgressData (
    ReadingID INTEGER PRIMARY KEY,  -- Unique ID for each reading progress record
    BookID INTEGER UNIQUE,          -- ID of the book being read (must be unique, foreign key)
    Progress FLOAT,                 -- Reading progress percentage (e.g., 50.0 for 50%)
    StartDate DATE,                 -- Start date of reading
    EndDate DATE,                   -- End date of reading
    PagesRead INTEGER,              -- Total number of pages read
    PageNumbersRead TEXT,           -- Specific page numbers read during the session (e.g., "1-50")
    FOREIGN KEY (BookID) REFERENCES BookData(BookID)
);


SQL Commands for Use Cases and User Stories:

1. Manage Book Collection:

   -- Add a new book
   INSERT INTO BookData (Title, Author, DateOfIssue, ISBN, Description, Publisher, BookCost, IsLoanedOut, UserID, GenreID)
   VALUES ('Sample Book', 'Author Name', '2024-09-15', '1234567890', 'A sample book description', 'Sample Publisher', 19.99, 0, 1, 1);

   -- Edit book details
   UPDATE BookData
   SET Title = 'Updated Book Title'
   WHERE BookID = 1;

   -- Remove a book
   DELETE FROM BookData WHERE BookID = 1;
   ```

2. Track Reading Progress:

   -- Record new reading progress
   INSERT INTO ReadingProgressData (BookID, Progress, StartDate, EndDate, PagesRead, PageNumbersRead)
   VALUES (1, 50.0, '2024-09-01', '2024-09-15', 100, '1-50, 51-100');

   -- Update reading progress
   UPDATE ReadingProgressData
   SET Progress = 75.0, PagesRead = 150
   WHERE BookID = 1;
   ```

3. Categorize Books by Genre:

   -- Add a new genre
   INSERT INTO GenreData (GenreName, TotalBooksRead, CurrentlyReading)
   VALUES ('Fiction', 10, 2);

   -- Update genre details
   UPDATE GenreData
   SET TotalBooksRead = 15
   WHERE GenreID = 1;
   ```

4. Loan Books to Friends:

   -- Add a new friend
   INSERT INTO FriendsData (FriendName, Email, ContactNumber, UserID)
   VALUES ('Friend One', 'friend1@example.com', '1234567890', 1);

   -- Loan a book to a friend
   INSERT INTO LoanData (BookID, FriendID, LoanDate, DueDate)
   VALUES (1, 1, '2024-09-10', '2024-09-30');
   ```

5. Send Return Date Reminders:

   SELECT FriendName, DueDate FROM LoanData
   JOIN FriendsData ON LoanData.FriendID = FriendsData.FriendID
   WHERE DueDate <= DATE('now', '+7 days');
   ```

6. Search for Books:
  
   -- Search books by title
   SELECT * FROM BookData WHERE Title LIKE '%search_keyword%';

   -- Search books by author
   SELECT * FROM BookData WHERE Author LIKE '%search_keyword%';

   -- Search books by ISBN
   SELECT * FROM BookData WHERE ISBN = '1234567890';
   ```

7. Manage Friends List:
  
   -- Add a new friend
   INSERT INTO FriendsData (FriendName, Email, ContactNumber, UserID)
   VALUES ('New Friend', 'newfriend@example.com', '0987654321', 1);

   -- Edit friend details
   UPDATE FriendsData
   SET FriendName = 'Updated Friend Name'
   WHERE FriendID = 1;

   -- Remove a friend
   DELETE FROM FriendsData WHERE FriendID = 1;
   ```

8. View Reading Summary:
   
   SELECT * FROM ReadingProgressData WHERE BookID IN (SELECT BookID FROM BookData WHERE UserID = 1);
   ```

9. Receive Notifications:
   
   SELECT * FROM LoanData WHERE DueDate <= DATE('now', '+7 days');
   ```

10. View All Loaned Books:
  
   SELECT * FROM LoanData WHERE ReturnDate IS NULL;
   ```

11. Generate Reports:
  
   SELECT UserID, COUNT(BookID) AS TotalBooks, SUM(BookCost) AS TotalValue FROM BookData GROUP BY UserID;
   ```
Additional Use Cases Implemented via `SELECT` Statements:

1. View All Books by Genre:
   - As a user, I want to view all books in a specific genre so that I can see what books are available in that category.
  
   SELECT * FROM BookData 
   WHERE GenreID = (SELECT GenreID FROM GenreData WHERE GenreName = 'Science Fiction');
   ```

2. Find Books Loaned to a Specific Friend:
   - As a user, I want to find all books that I have loaned to a specific friend so that I can track which books they currently have.

   SELECT BookData.Title, LoanData.LoanDate, LoanData.DueDate 
   FROM BookData 
   JOIN LoanData ON BookData.BookID = LoanData.BookID 
   JOIN FriendsData ON LoanData.FriendID = FriendsData.FriendID 
   WHERE FriendsData.FriendName = 'Emily White';
   ```

3. List Overdue Loans:
   - As a user, I want to see all books that are overdue so that I can remind my friends to return them.
 
   SELECT BookData.Title, FriendsData.FriendName, LoanData.DueDate 
   FROM LoanData 
   JOIN BookData ON LoanData.BookID = BookData.BookID 
   JOIN FriendsData ON LoanData.FriendID = FriendsData.FriendID 
   WHERE LoanData.DueDate < DATE('now') AND LoanData.ReturnDate IS NULL;
   ```

4. Check Availability of a Specific Book:
   - As a user, I want to check if a specific book is currently available in my collection so that I know if I can loan it out or read it myself.
  
   SELECT Title, IsLoanedOut 
   FROM BookData 
   WHERE Title = 'Dune';
   ```

5. View Top N Most Expensive Books:
   - As a user, I want to see the top N most expensive books in my collection so that I can assess the value of my collection.
  
   SELECT Title, BookCost 
   FROM BookData 
   ORDER BY BookCost DESC 
   LIMIT 5;  -- Replace 5 with the desired number of books
   ```

6. Search Books by Partial ISBN:
   - As a user, I want to search for books using a partial ISBN so that I can quickly find books when I only remember part of the ISBN.
   
   SELECT * FROM BookData 
   WHERE ISBN LIKE '%1234%';  -- Replace '1234' with the partial ISBN
   ```

7. Calculate Total Reading Time for Completed Books:
   - As a user, I want to calculate the total time I have spent reading completed books so that I can understand my reading habits better.
   
   SELECT SUM(JULIANDAY(EndDate) - JULIANDAY(StartDate)) AS TotalReadingDays 
   FROM ReadingProgressData 
   WHERE Progress = 100.0;
   ```

8. Generate a List of Friends Who Have Borrowed Books:
   - As a user, I want to see a list of friends who currently have borrowed books from me so that I can track all loans.
   
   SELECT DISTINCT FriendsData.FriendName 
   FROM LoanData 
   JOIN FriendsData ON LoanData.FriendID = FriendsData.FriendID 
   WHERE LoanData.ReturnDate IS NULL;
   ```

9. Find the Most Borrowed Book:
   - As a user, I want to know which book in my collection has been borrowed the most so that I can identify popular books among my friends.
   
   SELECT BookData.Title, COUNT(LoanData.LoanID) AS BorrowCount 
   FROM BookData 
   JOIN LoanData ON BookData.BookID = LoanData.BookID 
   GROUP BY BookData.Title 
   ORDER BY BorrowCount DESC 
   LIMIT 1;
   ```

10. View All Books Currently Being Read:
    - As a user, I want to see a list of all books I am currently reading so that I can manage my reading schedule.
   
    SELECT BookData.Title, ReadingProgressData.Progress 
    FROM BookData 
    JOIN ReadingProgressData ON BookData.BookID = ReadingProgressData.BookID 
    WHERE ReadingProgressData.Progress < 100.0;
    ```

11. List All Friends Who Have Not Returned Books on Time:
    - As a user, I want to see which friends have not returned their books on time so that I can send them reminders.
    
    SELECT FriendsData.FriendName, BookData.Title, LoanData.DueDate 
    FROM LoanData 
    JOIN FriendsData ON LoanData.FriendID = FriendsData.FriendID 
    JOIN BookData ON LoanData.BookID = BookData.BookID 
    WHERE LoanData.DueDate < DATE('now') AND LoanData.ReturnDate IS NULL;
    ```

12. Calculate Average Cost of Books in a Genre:
    - As a user, I want to know the average cost of books in a specific genre to understand the cost distribution in my collection.
    
    SELECT GenreData.GenreName, AVG(BookData.BookCost) AS AverageCost 
    FROM BookData 
    JOIN GenreData ON BookData.GenreID = GenreData.GenreID 
    WHERE GenreData.GenreName = 'Science Fiction';
    ```


SQL Commands for Inserting Random Test Data:

1. UserData Table:
 
   INSERT INTO UserData (UserName, Email, Password)
   VALUES 
       ('John Doe', 'john.doe@example.com', 'password123'),
       ('Alice Smith', 'alice.smith@example.com', 'securepassword'),
       ('Robert Johnson', 'robert.johnson@example.com', 'mysecretpassword');
   ```

2. GenreData Table:
  
   INSERT INTO GenreData (GenreName, TotalBooksRead, CurrentlyReading)
   VALUES 
       ('Fiction', 5, 2),
       ('Science Fiction', 8, 3),
       ('Fantasy', 10, 1),
       ('Non-Fiction', 4, 0),
       ('Mystery', 6, 1);
   ```

3. BookData Table:

   INSERT INTO BookData (Title, Author, DateOfIssue, ISBN, Description, Publisher, BookCost, IsLoanedOut, UserID, GenreID)
   VALUES 
       ('Dune', 'Frank Herbert', '2024-01-15', '978-0441013593', 'A science fiction novel set in a distant future.', 'Ace Books', 9.99, 0, 1, 2),
       ('The Hobbit', 'J.R.R. Tolkien', '2024-02-01', '978-0618968633', 'A fantasy novel about the journey of Bilbo Baggins.', 'Houghton Mifflin', 15.95, 1, 2, 3),
       ('Sapiens', 'Yuval Noah Harari', '2024-03-12', '978-0062316110', 'A brief history of humankind.', 'Harper', 20.99, 0, 2, 4),
       ('1984', 'George Orwell', '2024-04-10', '978-0451524935', 'A dystopian novel about a totalitarian regime.', 'Plume', 12.50, 0, 1, 2),
       ('The Da Vinci Code', 'Dan Brown', '2024-05-18', '978-0307474278', 'A mystery thriller that involves secret societies.', 'Anchor', 10.99, 1, 3, 5);
   ```

4. FriendsData Table:

   INSERT INTO FriendsData (FriendName, Email, ContactNumber, UserID)
   VALUES 
       ('Emily White', 'emily.white@example.com', '123-456-7890', 1),
       ('Michael Brown', 'michael.brown@example.com', '234-567-8901', 2),
       ('Sarah Davis', 'sarah.davis@example.com', '345-678-9012', 3);
   ```

5. LoanData Table:

   INSERT INTO LoanData (BookID, FriendID, LoanDate, DueDate, ReturnDate)
   VALUES 
       (2, 1, '2024-05-20', '2024-06-10', NULL),
       (5, 2, '2024-06-01', '2024-06-21', NULL);
   ```

6. ReadingProgressData Table:
  
   INSERT INTO ReadingProgressData (BookID, Progress, StartDate, EndDate, PagesRead, PageNumbersRead)
   VALUES 
       (1, 50.0, '2024-01-20', '2024-02-10', 250, '1-50, 51-100, 101-150, 151-200, 201-250'),
       (3, 80.0, '2024-02-15', '2024-03-15', 320, '1-50, 51-100, 101-150, 151-200, 201-250, 251-300, 301-320'),
       (4, 25.0, '2024-04-15', '2024-05-05', 100, '1-50, 51-100');
   ```